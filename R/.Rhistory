#            method = 'lm') +
method='loess',span=2) +
#Add Local Linears (Triangular Kernel)
geom_segment(aes(x = -h, xend = 0,
y = interceptLeft - slopeLeft * h, yend = interceptLeft),
color='#3366FF',size=1) +
geom_segment(aes(x = 0, xend = h,
y = interceptRight, yend = interceptRight  + slopeRight * h),
color='#3366FF',size=1) +
#Vertical Lines
geom_vline(xintercept = 0, linetype = 'solid') +
geom_vline(xintercept = -h, linetype = 'dashed') +
geom_vline(xintercept = h, linetype = 'dashed') +
#Old Features
#geom_smooth(data = dat, aes(x=X,y=Y), se=F, color='red') +
#geom_smooth(data = dat %>% filter(X > -h & X <= 0), aes(x=X,y=Y), method = 'lm', se=F) +
#geom_smooth(data = dat %>% filter(X > 0 & X < h), aes(x=X,y=Y), method = 'lm', se=F) +
#Theme
theme_bw()
}
graphicalDiagnostic(X=dat$leftPluralityPercentage, Y=dat$bond.market.response)
graphicalDiagnostic <- function(X, Y, c=0, p=1){
dat <- tibble(X=X,Y=Y)
rd <- rdrobust(y = dat$Y, x = dat$X, c=c, p=p)
interceptLeft <- rd$beta_p_l[1,]
interceptRight <- rd$beta_p_r[1,]
slopeLeft <- rd$beta_p_l[2,]
slopeRight <- rd$beta_p_r[2,]
h <- rd$bws['h','right']
ggplot() +
#Data
geom_point(data = dat, aes(x=X,y=Y)) +
#LOESS outside the bandwidth
geom_smooth(data = dat %>% filter(X <= -h), aes(x=X,y=Y), se=F, color='red',
method = 'lm') +
#          method='loess',span=2) +
geom_smooth(data = dat %>% filter(X >= h), aes(x=X,y=Y), se=F, color='red',
method = 'lm') +
#           method='loess',span=2) +
#Add Local Linears (Triangular Kernel)
geom_segment(aes(x = -h, xend = 0,
y = interceptLeft - slopeLeft * h, yend = interceptLeft),
color='#3366FF',size=1) +
geom_segment(aes(x = 0, xend = h,
y = interceptRight, yend = interceptRight  + slopeRight * h),
color='#3366FF',size=1) +
#Vertical Lines
geom_vline(xintercept = 0, linetype = 'solid') +
geom_vline(xintercept = -h, linetype = 'dashed') +
geom_vline(xintercept = h, linetype = 'dashed') +
#Old Features
#geom_smooth(data = dat, aes(x=X,y=Y), se=F, color='red') +
#geom_smooth(data = dat %>% filter(X > -h & X <= 0), aes(x=X,y=Y), method = 'lm', se=F) +
#geom_smooth(data = dat %>% filter(X > 0 & X < h), aes(x=X,y=Y), method = 'lm', se=F) +
#Theme
theme_bw()
}
dat %>% filter(bond.market.response < 4)
dat %<>% filter(bond.market.response < 4)
graphicalDiagnostic(X=dat$leftPluralityPercentage, Y=dat$bond.market.response)
# Author: Werner Krause
# Contact: WZB Social Science Center Berlin, Reichpietschufer 50, 10785 Berlin
# Email: werner.krause@wzb.eu
# Date: 2017-12-22
# Abou-Chadi, Tarik and Krause, Werner: The Causal Effect of Radical Right
# Success on Mainstream Partiesâ Policy Positions. A Regression
# Discontinuity Approach. BJPS.
# > sessionInfo()
# R version 3.4.3 (2017-11-30)
# Platform: x86_64-apple-darwin15.6.0 (64-bit)
# Running under: macOS High Sierra 10.13.1
#
# attached base packages:
#   [1] stats graphics  grDevices utils datasets methods base
# other attached packages:
#   [1] rdd_0.57 magrittr_1.5 dplyr_0.7.4 memisc_0.99.14.9
#   [5] sandwich_2.4-0 lmtest_0.9-35 ggplot2_2.2.1
# > Variable description
# iso2c: iso2 character country code
# edate: election date
# party: CMP-code mainstream party
# partyname: name of mainstream party
# parfam: party family of mainstream party (CMP-coding)
# thrs: electoral threshold
# thrs_l: electoral threshold (lagged)
# er.v.c: radical right party vote share (centerd on electoral threshold)
# er.v.c_l: radical right party vote share (centerd on electoral threshold, lagged)
# er.in: radical right parliamentary presence (binary indicator)
# er.in_l: radical right parliamentary presence (binary indicator, lagged)
# rile.logit: rile score (according to Lowe et al. 2011)
# per607: multiculturalism positive (CMP coding)
# per608: multiculturalism negative (CMP coding)
# multic.logit_fd: cultural protectionism score (Lowe et al. 2011, first difference)
# per608_fd: per608 score (first difference)
# multic.ratio_fd: cultural protectionism score (Kim and Fording 2003, first difference)
# af.bipolar_fd: cultural protectionism score (Alonso and da Fonseca 2012, first difference)
# meguid.bipolar_fd: cultural protectionism score (Meguid 2008, first difference)
# env.logit_fd: environment protection score (Lowe et al. 2011, first difference)
rm( list = ls( ))
cat( '\014' )
library( tidyverse )
library( magrittr )
library( rdrobust )
source( 'rrp_rdd_functions.R' )
#load( 'rrp_rdd.Rdata' )
ds <- read_delim("rrp_rdd.tab", "\t",
escape_double = FALSE, trim_ws = TRUE)
# Figure 1: Mainstream party position change on cultural protectionism
ggplot(ds, aes(x=er.v.c_l, y=multic.logit_fd)) +
geom_point() +
geom_smooth()
graphicalDiagnostic <- function(X, Y, c=0, p=1){
dat <- tibble(X=X,Y=Y)
rd <- rdrobust(y = dat$Y, x = dat$X, c=c, p=p)
interceptLeft <- rd$beta_p_l[1,]
interceptRight <- rd$beta_p_r[1,]
slopeLeft <- rd$beta_p_l[2,]
slopeRight <- rd$beta_p_r[2,]
h <- rd$bws['h','right']
ggplot() +
#Data
geom_point(data = dat, aes(x=X,y=Y)) +
#LOESS outside the bandwidth
geom_smooth(data = dat %>% filter(X <= -h), aes(x=X,y=Y), se=F, color='red',
method = 'lm') +
#          method='loess',span=2) +
geom_smooth(data = dat %>% filter(X >= h), aes(x=X,y=Y), se=F, color='red',
method = 'lm') +
#           method='loess',span=2) +
#Add Local Linears (Triangular Kernel)
geom_segment(aes(x = -h, xend = 0,
y = interceptLeft - slopeLeft * h, yend = interceptLeft),
color='#3366FF',size=1) +
geom_segment(aes(x = 0, xend = h,
y = interceptRight, yend = interceptRight  + slopeRight * h),
color='#3366FF',size=1) +
#Vertical Lines
geom_vline(xintercept = 0, linetype = 'solid') +
geom_vline(xintercept = -h, linetype = 'dashed') +
geom_vline(xintercept = h, linetype = 'dashed') +
#Old Features
#geom_smooth(data = dat, aes(x=X,y=Y), se=F, color='red') +
#geom_smooth(data = dat %>% filter(X > -h & X <= 0), aes(x=X,y=Y), method = 'lm', se=F) +
#geom_smooth(data = dat %>% filter(X > 0 & X < h), aes(x=X,y=Y), method = 'lm', se=F) +
#Theme
theme_bw()
}
graphicalDiagnostic(X=ds$er.v.c_l, Y=ds$multic.logit_fd)
#Load Packages & Data -----------------------------------
library(tidyverse)
library(magrittr)
library(rdrobust)
library(cowplot)
#source("IntRateCostSocDem_preprocessing_v2_1.r") #Merge and Clean Dataset
elections <- read_csv("IntRateCostSocDem_dataset_v2_1.csv")
#Drop Switzerland, because of the "Magic Formula"
elections %<>% filter(country_name != "Switzerland")
elections %>%
group_by(!is.na(bond.yield.t),
leftPluralityPercentage < 0.05 & leftPluralityPercentage > -0.05) %>%
summarise(num = n())
elections %>%
filter(!is.na(bond.market.response))
elections %>%
filter(!is.na(bond.yield.t)) %>%
nrow
elections %>%
filter(!is.na(bond.yield.t),
ENPP < 3.5) %>%
#Appendix A.1: Vary the ENPP Threshold -------------------------------------------------------------
df <- tibble(enppThreshold = seq(2.5,12,0.1),
estimate = NA,
ci95low = NA,
ci95high = NA,
n = NA)
elections %>%
filter(!is.na(bond.yield.t),
ENPP < 3.5) %>%
mutate(country_year = paste0(country_name, year))
elections %>%
filter(!is.na(bond.yield.t),
enpp < 3.5) %>%
mutate(country_year = paste0(country_name, year))
elections %>%
filter(!is.na(bond.yield.t),
enpp < 3.5) %>%
mutate(country_year = paste0(country_name, election_year)) %>%
use_series(country_year)
elections %>%
filter(!is.na(bond.yield.t),
enpp < 3.5) %>%
mutate(country_year = paste0(country_name, election_year)) %>%
use_series(country_year) %>%
sort
elections %>%
filter(!is.na(bond.yield.t),
enpp > 3.5) %>%
mutate(country_year = paste0(country_name, election_year)) %>%
use_series(country_year) %>%
sort
ggdat <- elections %>%
filter(!is.na(bond.yield.t)) %>%
mutate(country_year = paste0(country_name, election_year))
ggplot(ggdat, aes(y=enpp,label=country_year)) + geom_text()
ggplot(ggdat, aes(x = 1y=enpp,label=country_year)) + geom_text()
ggplot(ggdat, aes(x = 1, y=enpp,label=country_year)) + geom_text()
ggplot(ggdat, aes(x = 0, y=enpp,label=country_year)) + geom_text() +
xlab("") + ylab("ENPP") + theme_bw()
ggdat <- elections %>%
filter(!is.na(bond.yield.t)) %>%
mutate(country_year = paste(country_name, election_year))
ggplot(ggdat, aes(x = 0, y=enpp,label=country_year)) + geom_text() +
xlab("") + ylab("ENPP") + theme_bw()
ggplot(ggdat, aes(x = factor(country_name), y=enpp,label=country_year)) + geom_text() +
xlab("") + ylab("ENPP") + theme_bw()
ggplot(ggdat, aes(x = factor(country_name), y=enpp,label=election_year)) + geom_text() +
xlab("") + ylab("ENPP") + theme_bw()
ggdat <- elections %>%
filter(!is.na(bond.yield.t)) %>%
mutate(country_year = paste0(country_name_short, election_year))
ggplot(ggdat, aes(x = factor(country_name), y=enpp,label=election_year)) + geom_text() +
xlab("") + ylab("ENPP") + theme_bw()
ggplot(ggdat, aes(x = factor(country_name), y=enpp,label=country_year)) + geom_text() +
xlab("") + ylab("ENPP") + theme_bw()
ggplot(ggdat, aes(x = factor(country_name), y=enpp,label=country_year)) + geom_text() +
xlab("") + ylab("ENPP") + theme_bw() + geom_hline(yintercept=3.5)
ggplot(ggdat, aes(x = factor(country_name), y=enpp,label=country_year)) + geom_text() +
xlab("") + ylab("ENPP") + theme_bw() + geom_hline(yintercept=3.5, linetype='dashed')
ggsave("LowFragHighFrag.png", scale = 1.5)
ggsave("LowFragHighFrag.png", scale = 2)
ggplot(ggdat, aes(x = enpp, y=factor(country_name))) + geom_point() +
xlab("ENPP") + ylab("Country") + theme_bw() + geom_vline(xintercept=3.5, linetype='dashed')
ggplot(ggdat, aes(x = enpp, y=factor(country_name), label=election_year)) + geom_text() +
xlab("ENPP") + ylab("Country") + theme_bw() + geom_vline(xintercept=3.5, linetype='dashed')
ggplot(ggdat, aes(x = year, y=enpp, label=country_name_short)) + geom_text() +
xlab("Year") + ylab("ENPP") + theme_bw() + geom_hline(yintercept=3.5, linetype='dashed')
ggplot(ggdat, aes(x = election_year, y=enpp, label=country_name_short)) + geom_text() +
xlab("Year") + ylab("ENPP") + theme_bw() + geom_hline(yintercept=3.5, linetype='dashed')
ggplot(ggdat, aes(x = enpp, y=election_year, label=country_name_short)) + geom_text() +
xlab("ENPP") + ylab("Year") + theme_bw() + geom_vline(xintercept=3.5, linetype='dashed')
ggplot(ggdat, aes(x = enpp, y=factor(country_name), label=election_year)) + geom_text() +
xlab("ENPP") + ylab("Country") + theme_bw() + geom_vline(xintercept=3.5, linetype='dashed')
ggplot(ggdat, aes(x = enpp, y=factor(country_name))) + geom_point() +
xlab("ENPP") + ylab("Country") + theme_bw() + geom_vline(xintercept=3.5, linetype='dashed')
ggplot(ggdat, aes(x = enpp, y=factor(country_name), label=election_year)) + geom_text() +
xlab("ENPP") + ylab("Country") + theme_bw() + geom_vline(xintercept=3.5, linetype='dashed')
# ggplot(ggdat, aes(x = factor(country_name), y=enpp,label=country_year)) + geom_text() +
#   xlab("Country") + ylab("ENPP") + theme_bw() + geom_hline(yintercept=3.5, linetype='dashed')
#
ggplot(ggdat, aes(x = enpp, y=factor(country_name))) + geom_point() +
xlab("ENPP") + ylab("Country") + theme_bw() + geom_vline(xintercept=3.5, linetype='dashed')
#Change the factor levels to get a prettier plot
ggdat %>%
group_by(country_name) %>%
summarise(mean_ENPP = mean(enpp))
#Change the factor levels to get a prettier plot
ggdat %>%
group_by(country_name) %>%
summarise(mean_ENPP = mean(enpp)) %>%
arrange(mean_ENPP)
#Change the factor levels to get a prettier plot
ggdat %>%
group_by(country_name) %>%
summarise(mean_ENPP = mean(enpp)) %>%
arrange(mean_ENPP) %>%
use_series(country_name)
#Change the factor levels to get a prettier plot
correctOrder <- ggdat %>%
group_by(country_name) %>%
summarise(mean_ENPP = mean(enpp)) %>%
arrange(mean_ENPP) %>%
use_series(country_name)
ggdat$country_name <- factor(ggdat$country_name, levels = correctOrder)
ggplot(ggdat, aes(x = enpp, y=country_name)) + geom_point() +
xlab("ENPP") + ylab("Country") + theme_bw() + geom_vline(xintercept=3.5, linetype='dashed')
ggsave("LowFragHighFrag.png", scale = 1.5)
ggsave("LowFragHighFrag.png", scale = 1.2)
ggsave("LowFragHighFrag.png", scale = 1)
ggsave("LowFragHighFrag.png", scale = 1.1)
elections %>%
group_by(!is.na(bond.yield.t),
leftPluralityPercentage < 0.05 & leftPluralityPercentage > -0.05) %>%
summarise(num = n())
ggRDFirstStage <- function(enppThreshold){
ggleft1 <- elections %>% filter(enpp < enppThreshold, leftPluralityPercentage < 0)
nleft1 <- ggleft1 %>% filter(!is.na(cabinetLeft)) %>% nrow
ggright1 <- elections %>% filter(enpp < enppThreshold, leftPluralityPercentage > 0)
nright1 <- ggright1 %>% filter(!is.na(cabinetLeft)) %>% nrow
leftPanel <- ggplot() +
geom_point(data = ggleft1, aes(x=leftPluralityPercentage,y=cabinetLeft)) +
geom_point(data = ggright1, aes(x=leftPluralityPercentage,y=cabinetLeft)) +
geom_smooth(data = ggleft1, aes(x=leftPluralityPercentage, y= cabinetLeft), se=F) +
geom_smooth(data = ggright1, aes(x=leftPluralityPercentage, y= cabinetLeft), se=F) +
xlab("Left Party Plurality") + ylab("Left Party in Cabinet") +
ggtitle(paste0("Low Fragmentation (n = ", nleft1+nright1, ")")) +
xlim(-1,1) + ylim(0,1) + theme_bw() +
geom_vline(xintercept = 0, linetype = "dashed")
ggleft2 <- elections %>% filter(enpp > enppThreshold, leftPluralityPercentage < 0)
nleft2 <- ggleft2 %>% filter(!is.na(cabinetLeft)) %>% nrow
ggright2 <- elections %>% filter(enpp > enppThreshold, leftPluralityPercentage > 0)
nright2 <- ggright2 %>% filter(!is.na(cabinetLeft)) %>% nrow
rightPanel <- ggplot() +
geom_point(data = ggleft2, aes(x=leftPluralityPercentage,y=cabinetLeft)) +
geom_point(data = ggright2, aes(x=leftPluralityPercentage,y=cabinetLeft)) +
geom_smooth(data = ggleft2, aes(x=leftPluralityPercentage, y= cabinetLeft), se=F) +
geom_smooth(data = ggright2, aes(x=leftPluralityPercentage, y= cabinetLeft), se=F) +
xlab("Left Party Plurality") + ylab("Left Party in Cabinet") +
ggtitle(paste0("High Fragmentation (n = ", nleft2+nright2, ")")) +
xlim(-1,1) + ylim(0,1) + theme_bw() +
geom_vline(xintercept = 0, linetype = "dashed")
plot_grid(leftPanel, rightPanel)
}
enppThreshold <- 3.5
ggRDFirstStage(enppThreshold)
ggRD <- function(df, enppThreshold, depvar, yearSubset = 1940:2020, ylabel = "Bond Yield Change (1 Month)"){
Y <- df[,depvar] %>% unlist %>% as.numeric %>% na.omit
df$Y <- df[,depvar] %>% unlist %>% as.numeric
ggleft1 <- df %>% filter(enpp < enppThreshold, leftPluralityPercentage < 0, election_year %in% yearSubset)
nleft1 <- ggleft1 %>% filter(!is.na(Y)) %>% nrow
ggright1 <- df %>% filter(enpp < enppThreshold, leftPluralityPercentage > 0, election_year %in% yearSubset)
nright1 <- ggright1 %>% filter(!is.na(Y)) %>% nrow
leftPanel <- ggplot() +
geom_point(data = ggleft1, aes(x=leftPluralityPercentage,y=Y),size=0.75) +
geom_point(data = ggright1, aes(x=leftPluralityPercentage,y=Y),size=0.75) +
geom_smooth(data = ggleft1, aes(x=leftPluralityPercentage, y= Y), se=F) +
geom_smooth(data = ggright1, aes(x=leftPluralityPercentage, y=Y), se=F) +
xlab("Left Party Plurality") + ylab(ylabel) +
ggtitle(paste0("Low Fragmentation (n = ", nleft1+nright1, ")")) +
xlim(-1,1) + ylim(-1,1) + theme_bw() + geom_vline(xintercept = 0, linetype = "dashed")
ggleft2 <- df %>% filter(enpp > enppThreshold, leftPluralityPercentage < 0, election_year %in% yearSubset)
nleft2<- ggleft2 %>% filter(!is.na(Y)) %>% nrow
ggright2 <- df %>% filter(enpp > enppThreshold, leftPluralityPercentage > 0, election_year %in% yearSubset)
nright2 <- ggright2 %>% filter(!is.na(Y)) %>% nrow
rightPanel <- ggplot() +
geom_point(data = ggleft2, aes(x=leftPluralityPercentage,y=Y), size = 0.75) +
geom_point(data = ggright2, aes(x=leftPluralityPercentage,y=Y), size = 0.75) +
geom_smooth(data = ggleft2, aes(x=leftPluralityPercentage, y= Y), se=F) +
geom_smooth(data = ggright2, aes(x=leftPluralityPercentage, y= Y), se=F) +
xlab("Left Party Plurality") + ylab(ylabel) +
ggtitle(paste0("High Fragmentation (n = ", nleft2+nright2, ")")) +
xlim(-1,1) + ylim(-1,1) + theme_bw() + geom_vline(xintercept = 0, linetype = "dashed")
plot_grid(leftPanel, rightPanel)
}
elections$bond.market.response <- (elections$bond.yield.tplus1 - elections$bond.yield.t)
ggRD(elections, enppThreshold, depvar = "bond.market.response")
Y_all <- elections$bond.market.response
YlowENPP <- elections %>% filter(enpp < enppThreshold) %>% use_series(bond.market.response)
YhighENPP <- elections %>% filter(enpp > enppThreshold) %>% use_series(bond.market.response)
X_all <- elections$leftPluralityPercentage
XlowENPP <- elections %>% filter(enpp < enppThreshold) %>% use_series(leftPluralityPercentage)
XhighENPP <- elections %>% filter(enpp > enppThreshold) %>% use_series(leftPluralityPercentage)
rdplot(y = Y_all, x = X_all, p = 1)
rdplot(y = YlowENPP, x = XlowENPP, p = 1)
rdplot(y = YhighENPP, x = XhighENPP, p = 1)
rdModelAll <- rdrobust(y = Y_all, x = X_all, c = 0)
rdModelLowENPP <- rdrobust(y = YlowENPP, x = XlowENPP, c = 0)
rdModelHighENPP <- rdrobust(y = YhighENPP, x = XhighENPP, c = 0)
summary(rdModelAll)
summary(rdModelLowENPP)
summary(rdModelHighENPP)
graphicalDiagnostic <- function(X, Y, c=0, p=1){
dat <- tibble(X=X,Y=Y)
rd <- rdrobust(y = dat$Y, x = dat$X, c=c, p=p)
interceptLeft <- rd$beta_p_l[1,]
interceptRight <- rd$beta_p_r[1,]
slopeLeft <- rd$beta_p_l[2,]
slopeRight <- rd$beta_p_r[2,]
h <- rd$bws['h','right']
ggplot() +
#Data
geom_point(data = dat, aes(x=X,y=Y)) +
#LOESS outside the bandwidth
geom_smooth(data = dat %>% filter(X <= -h), aes(x=X,y=Y), se=F, color='red',
method = 'lm') +
#          method='loess',span=2) +
geom_smooth(data = dat %>% filter(X >= h), aes(x=X,y=Y), se=F, color='red',
method = 'lm') +
#           method='loess',span=2) +
#Add Local Linears (Triangular Kernel)
geom_segment(aes(x = -h, xend = 0,
y = interceptLeft - slopeLeft * h, yend = interceptLeft),
color='#3366FF',size=1) +
geom_segment(aes(x = 0, xend = h,
y = interceptRight, yend = interceptRight  + slopeRight * h),
color='#3366FF',size=1) +
#Vertical Lines
geom_vline(xintercept = 0, linetype = 'solid') +
geom_vline(xintercept = -h, linetype = 'dashed') +
geom_vline(xintercept = h, linetype = 'dashed') +
#Old Features
#geom_smooth(data = dat, aes(x=X,y=Y), se=F, color='red') +
#geom_smooth(data = dat %>% filter(X > -h & X <= 0), aes(x=X,y=Y), method = 'lm', se=F) +
#geom_smooth(data = dat %>% filter(X > 0 & X < h), aes(x=X,y=Y), method = 'lm', se=F) +
#Theme
theme_bw()
}
graphicalDiagnostic(XlowENPP, YlowENPP)
View(graphicalDiagnostic)
function(X, Y, c=0, p=1){
dat <- tibble(X=X,Y=Y)
rd <- rdrobust(y = dat$Y, x = dat$X, c=c, p=p)
interceptLeft <- rd$beta_p_l[1,]
interceptRight <- rd$beta_p_r[1,]
slopeLeft <- rd$beta_p_l[2,]
slopeRight <- rd$beta_p_r[2,]
h <- rd$bws['h','right']
ggplot() +
#Data
geom_point(data = dat, aes(x=X,y=Y)) +
#LOESS outside the bandwidth
geom_smooth(data = dat %>% filter(X <= -h), aes(x=X,y=Y), se=F, color='red',
method = 'lm') +
#          method='loess',span=2) +
geom_smooth(data = dat %>% filter(X >= h), aes(x=X,y=Y), se=F, color='red',
method = 'lm') +
#           method='loess',span=2) +
#Add Local Linears (Triangular Kernel)
geom_segment(aes(x = -h, xend = 0,
y = interceptLeft - slopeLeft * h, yend = interceptLeft),
color='#3366FF',size=1) +
geom_segment(aes(x = 0, xend = h,
y = interceptRight, yend = interceptRight  + slopeRight * h),
color='#3366FF',size=1) +
#Vertical Lines
geom_vline(xintercept = 0, linetype = 'solid') +
geom_vline(xintercept = -h, linetype = 'dashed') +
geom_vline(xintercept = h, linetype = 'dashed') +
#Old Features
geom_smooth(data = dat, aes(x=X,y=Y), se=F, color='red') +
#geom_smooth(data = dat %>% filter(X > -h & X <= 0), aes(x=X,y=Y), method = 'lm', se=F) +
#geom_smooth(data = dat %>% filter(X > 0 & X < h), aes(x=X,y=Y), method = 'lm', se=F) +
#Theme
theme_bw()
}
graphicalDiagnostic(XlowENPP, YlowENPP)
graphicalDiagnostic(XlowENPP, YlowENPP)
graphicalDiagnostic <- function(X, Y, c=0, p=1){
dat <- tibble(X=X,Y=Y)
rd <- rdrobust(y = dat$Y, x = dat$X, c=c, p=p)
interceptLeft <- rd$beta_p_l[1,]
interceptRight <- rd$beta_p_r[1,]
slopeLeft <- rd$beta_p_l[2,]
slopeRight <- rd$beta_p_r[2,]
h <- rd$bws['h','right']
ggplot() +
#Data
geom_point(data = dat, aes(x=X,y=Y)) +
#LOESS outside the bandwidth
geom_smooth(data = dat %>% filter(X <= -h), aes(x=X,y=Y), se=F, color='red',
method = 'lm') +
#          method='loess',span=2) +
geom_smooth(data = dat %>% filter(X >= h), aes(x=X,y=Y), se=F, color='red',
method = 'lm') +
#           method='loess',span=2) +
#Add Local Linears (Triangular Kernel)
geom_segment(aes(x = -h, xend = 0,
y = interceptLeft - slopeLeft * h, yend = interceptLeft),
color='#3366FF',size=1) +
geom_segment(aes(x = 0, xend = h,
y = interceptRight, yend = interceptRight  + slopeRight * h),
color='#3366FF',size=1) +
#Vertical Lines
geom_vline(xintercept = 0, linetype = 'solid') +
geom_vline(xintercept = -h, linetype = 'dashed') +
geom_vline(xintercept = h, linetype = 'dashed') +
#Old Features
geom_smooth(data = dat, aes(x=X,y=Y), se=F, color='red') +
#geom_smooth(data = dat %>% filter(X > -h & X <= 0), aes(x=X,y=Y), method = 'lm', se=F) +
#geom_smooth(data = dat %>% filter(X > 0 & X < h), aes(x=X,y=Y), method = 'lm', se=F) +
#Theme
theme_bw()
}
graphicalDiagnostic(XlowENPP, YlowENPP)
graphicalDiagnostic <- function(X, Y, c=0, p=1){
dat <- tibble(X=X,Y=Y)
rd <- rdrobust(y = dat$Y, x = dat$X, c=c, p=p)
interceptLeft <- rd$beta_p_l[1,]
interceptRight <- rd$beta_p_r[1,]
slopeLeft <- rd$beta_p_l[2,]
slopeRight <- rd$beta_p_r[2,]
h <- rd$bws['h','right']
ggplot() +
#Data
geom_point(data = dat, aes(x=X,y=Y)) +
#LOESS outside the bandwidth
geom_smooth(data = dat %>% filter(X <= -0), aes(x=X,y=Y), se=F, color='red',
method = 'lm') +
#          method='loess',span=2) +
geom_smooth(data = dat %>% filter(X >= 0), aes(x=X,y=Y), se=F, color='red',
method = 'lm') +
#           method='loess',span=2) +
#Add Local Linears (Triangular Kernel)
geom_segment(aes(x = -h, xend = 0,
y = interceptLeft - slopeLeft * h, yend = interceptLeft),
color='#3366FF',size=1) +
geom_segment(aes(x = 0, xend = h,
y = interceptRight, yend = interceptRight  + slopeRight * h),
color='#3366FF',size=1) +
#Vertical Lines
geom_vline(xintercept = 0, linetype = 'solid') +
geom_vline(xintercept = -h, linetype = 'dashed') +
geom_vline(xintercept = h, linetype = 'dashed') +
#Old Features
#geom_smooth(data = dat, aes(x=X,y=Y), se=F, color='red') +
#geom_smooth(data = dat %>% filter(X > -h & X <= 0), aes(x=X,y=Y), method = 'lm', se=F) +
#geom_smooth(data = dat %>% filter(X > 0 & X < h), aes(x=X,y=Y), method = 'lm', se=F) +
#Theme
theme_bw()
}
graphicalDiagnostic(XlowENPP, YlowENPP)
graphicalDiagnostic(X_all,Y_all)
graphicalDiagnostic(XhighENPP,YhighENPP)
